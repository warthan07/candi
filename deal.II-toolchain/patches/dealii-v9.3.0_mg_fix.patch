From 6b112d8902fc61cb9cc38df3a1f59e7c7366d5dc Mon Sep 17 00:00:00 2001
From: Peter Munch <peterrmuench@gmail.com>
Date: Fri, 3 Sep 2021 10:10:47 +0200
Subject: [PATCH] Fix MGTransferMatrixFree::interpolate_to_mg() for PBC

---
 .../multigrid/mg_transfer_matrix_free.h       |  27 +++++
 tests/multigrid/interpolate_to_mg_01.cc       | 109 ++++++++++++++++++
 ...e_to_mg_01.with_p4est=true.mpirun=2.output |   5 +
 3 files changed, 141 insertions(+)
 create mode 100644 tests/multigrid/interpolate_to_mg_01.cc
 create mode 100644 tests/multigrid/interpolate_to_mg_01.with_p4est=true.mpirun=2.output

diff --git a/include/deal.II/multigrid/mg_transfer_matrix_free.h b/include/deal.II/multigrid/mg_transfer_matrix_free.h
index 5d6324be132d..ff78ed8efd91 100644
--- a/include/deal.II/multigrid/mg_transfer_matrix_free.h
+++ b/include/deal.II/multigrid/mg_transfer_matrix_free.h
@@ -536,6 +536,30 @@ MGTransferMatrixFree<dim, Number>::interpolate_to_mg(
 
   // do the transfer from level to level-1:
   dst[max_level].update_ghost_values();
+
+  const auto replace = [](const MGConstrainedDoFs *mg_constrained_dofs,
+                          const unsigned int       level,
+                          std::vector<types::global_dof_index> &dof_indices) {
+    if (mg_constrained_dofs == nullptr)
+      return;
+
+    if (mg_constrained_dofs != nullptr &&
+        mg_constrained_dofs->get_level_constraints(level).n_constraints() > 0)
+      for (auto &ind : dof_indices)
+        if (mg_constrained_dofs->get_level_constraints(level)
+              .is_identity_constrained(ind))
+          {
+            Assert(mg_constrained_dofs->get_level_constraints(level)
+                       .get_constraint_entries(ind)
+                       ->size() == 1,
+                   ExcInternalError());
+            ind = mg_constrained_dofs->get_level_constraints(level)
+                    .get_constraint_entries(ind)
+                    ->front()
+                    .first;
+          }
+  };
+
   for (unsigned int level = max_level; level > min_level; --level)
     {
       // auxiliary vector which always has ghost elements
@@ -569,6 +593,9 @@ MGTransferMatrixFree<dim, Number>::interpolate_to_mg(
             for (unsigned int child = 0; child < cell->n_children(); ++child)
               {
                 cell->child(child)->get_mg_dof_indices(dof_indices);
+
+                replace(this->mg_constrained_dofs, level, dof_indices);
+
                 for (unsigned int i = 0; i < fe.n_dofs_per_cell(); ++i)
                   dof_values_fine(i) = (*input)(dof_indices[i]);
                 fe.get_restriction_matrix(child, cell->refinement_case())
diff --git a/tests/multigrid/interpolate_to_mg_01.cc b/tests/multigrid/interpolate_to_mg_01.cc
new file mode 100644
index 000000000000..89bd2f70cb93
--- /dev/null
+++ b/tests/multigrid/interpolate_to_mg_01.cc
@@ -0,0 +1,109 @@
+// ---------------------------------------------------------------------
+//
+// Copyright (C) 2021 by the deal.II authors
+//
+// This file is part of the deal.II library.
+//
+// The deal.II library is free software; you can use it, redistribute
+// it, and/or modify it under the terms of the GNU Lesser General
+// Public License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+// The full text of the license can be found in the file LICENSE.md at
+// the top level directory of deal.II.
+//
+// ---------------------------------------------------------------------
+
+
+// test function MGTransferMatrixFree::interpolate_to_mg() for periodic
+// boundaries
+
+#include <deal.II/base/utilities.h>
+
+#include <deal.II/distributed/tria.h>
+
+#include <deal.II/fe/fe_q.h>
+#include <deal.II/fe/fe_system.h>
+#include <deal.II/fe/mapping_q.h>
+
+#include <deal.II/grid/grid_generator.h>
+#include <deal.II/grid/grid_tools.h>
+#include <deal.II/grid/tria.h>
+
+#include <deal.II/lac/affine_constraints.h>
+#include <deal.II/lac/la_parallel_vector.h>
+
+#include <deal.II/matrix_free/matrix_free.h>
+
+#include <deal.II/multigrid/mg_transfer_matrix_free.h>
+#include <deal.II/multigrid/multigrid.h>
+
+#include "../tests.h"
+
+template <int dim>
+void
+test()
+{
+  const unsigned int fe_degree = 1;
+
+  parallel::distributed::Triangulation<dim> tria(
+    MPI_COMM_WORLD,
+    Triangulation<dim>::limit_level_difference_at_vertices,
+    parallel::distributed::Triangulation<dim>::construct_multigrid_hierarchy);
+
+  GridGenerator::hyper_cube(tria, 0., 1., true);
+
+  std::vector<GridTools::PeriodicFacePair<TriaIterator<CellAccessor<dim, dim>>>>
+    tria_matched_pairs;
+  GridTools::collect_periodic_faces(tria, 0, 1, 0, tria_matched_pairs);
+  tria.add_periodicity(tria_matched_pairs);
+  tria.refine_global(2);
+
+  const FE_Q<dim> fe(fe_degree);
+  DoFHandler<dim> dof_handler(tria);
+  dof_handler.distribute_dofs(fe);
+  dof_handler.distribute_mg_dofs();
+
+  IndexSet locally_relevant_dofs;
+  DoFTools::extract_locally_relevant_dofs(dof_handler, locally_relevant_dofs);
+
+  AffineConstraints<double> constraints;
+  constraints.reinit(locally_relevant_dofs);
+  DoFTools::make_hanging_node_constraints(dof_handler, constraints);
+
+  std::vector<
+    GridTools::PeriodicFacePair<typename DoFHandler<dim>::cell_iterator>>
+    dof_matched_pairs;
+  GridTools::collect_periodic_faces(dof_handler, 0, 1, 0, dof_matched_pairs);
+  DoFTools::make_periodicity_constraints<dim, dim>(dof_matched_pairs,
+                                                   constraints);
+  constraints.close();
+
+  LinearAlgebra::distributed::Vector<double> qsol(
+    dof_handler.locally_owned_dofs(), locally_relevant_dofs, MPI_COMM_WORLD);
+
+  MGLevelObject<LinearAlgebra::distributed::Vector<double>> mg_qsol;
+  MGConstrainedDoFs                                         mg_constrained_dofs;
+  MGTransferMatrixFree<dim, double>                         mg_transfer;
+
+  unsigned int n_tria_levels = tria.n_global_levels();
+  mg_qsol.resize(0, n_tria_levels - 1);
+
+  mg_constrained_dofs.initialize(dof_handler);
+  mg_transfer.initialize_constraints(mg_constrained_dofs);
+  mg_transfer.build(dof_handler);
+
+  mg_transfer.interpolate_to_mg(dof_handler, mg_qsol, qsol);
+
+  deallog << "OK" << std::endl;
+}
+
+
+
+int
+main(int argc, char *argv[])
+{
+  Utilities::MPI::MPI_InitFinalize mpi_initialization(argc, argv, 1);
+  MPILogInitAll                    all;
+
+  test<2>();
+}
diff --git a/tests/multigrid/interpolate_to_mg_01.with_p4est=true.mpirun=2.output b/tests/multigrid/interpolate_to_mg_01.with_p4est=true.mpirun=2.output
new file mode 100644
index 000000000000..52103938b025
--- /dev/null
+++ b/tests/multigrid/interpolate_to_mg_01.with_p4est=true.mpirun=2.output
@@ -0,0 +1,5 @@
+
+DEAL:0::OK
+
+DEAL:1::OK
+
